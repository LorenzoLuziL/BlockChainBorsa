// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Test {
    struct StatoContratto {
        string nome;
        uint256 numero1;
        uint256 numero2;
        uint256 numero3;
    }
    bytes[] public temp_array;
    StatoContratto public statoContratto;

    function decode(bytes memory data) public pure returns (string memory, uint256, uint256) {
        string memory decodedString;
        uint256 firstUint;
        uint256 secondUint;
        uint256 stringaPos;
        uint256 offset = 32;
        //nel caso di una stringa
       //
        // Read first uint256
        assembly {
            stringaPos := mload(add(data, offset))
        }
        stringaPos+=32;
        offset += 32;
        //read secon uint 
        assembly{
            secondUint := mload(add(data, offset))
        }
        offset +=32; 
        assembly{
            firstUint:=mload(add(data,offset))
        }
        assembly{
            let strLen := mload(add(data, add(stringaPos, 0x20)))
            decodedString:=mload(add(data,add(stringaPos,0x40)))
        }
        return (decodedString, firstUint, secondUint);
    }

    function encoderStringNum(string memory _temp,uint256 _num) public pure returns (bytes memory){
        return abi.encode(_temp,_num);
    }
    function encoderString(string memory _temp) public pure returns (bytes memory){
        return abi.encode(_temp);
    }
    function encoderStringBool(string memory _temp,bool _flag) public pure returns (bytes memory){
        return abi.encode(_temp,_flag);
    }
    function encoderAll(string memory _temp,uint256 _num,bool _flag) public pure returns (bytes memory){
        return abi.encode(_temp,_num,_flag);
    }
    function encodINTINT(uint256  _num1,uint256 _num2) public pure returns (bytes memory){
        return abi.encode(_num1,_num2);
    }
    
}
