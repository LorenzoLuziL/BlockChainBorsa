// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StoreFunction{

    struct Value{
        bytes tipo;
        bytes value;
    }
    struct FunctionExecuted{
        bytes functName;
        mapping(bytes=>Value) attributes;
    }
    mapping(uint=>FunctionExecuted) orderFunction;
    mapping(bytes=>Value) attribute;
    uint public functionCount=0;
    function testFuncion(bytes[] memory data,bytes[] memory attributi,bytes[] memory tipi,bytes memory functName)public{
        functionCount++;
    
        FunctionExecuted storage newFunction = orderFunction[functionCount];

        newFunction.functName = functName;

        for (uint i = 0; i < attributi.length; i++) {
            Value memory val=Value({
                tipo: tipi[i],
                value: data[i]
            });
            attribute[attributi[i]]=val;
            newFunction.attributes[attributi[i]] = val;
        }
    }

    function getAttributeValue(bytes memory attributeName)public view  returns(uint x,string memory y,bool z){
        if(keccak256(attribute[attributeName].tipo)==keccak256(bytes("string"))){
            y=abi.decode(attribute[attributeName].value, (string));
        }else if(keccak256(attribute[attributeName].tipo)==keccak256(bytes("uint"))){
            x=abi.decode(attribute[attributeName].value, (uint));
        }else if(keccak256(attribute[attributeName].value)==keccak256(bytes("bool"))){
            z=abi.decode(attribute[attributeName].value,(bool));
        }
    }
}