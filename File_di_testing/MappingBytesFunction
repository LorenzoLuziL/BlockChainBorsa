// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract primoTest{

    struct StatoMemoria{
        uint numeroPersone;
        uint tempoMedio;
        string nomeRappresentante;
    }
    mapping(bytes=>bytes) public statoMemoria;
    function testFunction(bytes[] memory data,bytes [] memory attributi) public {
        for(uint i=0;i<attributi.length;i++){
            statoMemoria[attributi[i]]=data[i];
        }
    }
    //
    //funzioni di appoggio che mi servono solo per codificare in bytes 
    //gli attributi da passare alla funzione sopra
    //
    function codificaDatiInt(int numero)public pure returns(bytes memory ){
        return abi.encode(numero);
    }

    function codificaDatiString(string memory stringa)public pure returns (bytes memory ){
        return abi.encode(stringa);
    }

    function decodificaInt(bytes memory n) public pure returns (uint x){
        x=abi.decode(n, (uint));
    }
    function decodificaString(bytes memory n) public pure returns (string memory x){
        x=abi.decode(n, (string));
    }
}