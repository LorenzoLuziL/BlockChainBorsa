// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract structArrayTest{

    bytes32 [5] private attributi;
    bytes32 [5] private valore;

    function setDoubleArray(bytes32[] memory  _valore,bytes32[] memory  _attributi) public{
        assembly{
            let attributi_slot := sload(attributi.slot)
            let valore_slot := sload(valore.slot)
            for { let i := 0 } lt(i, mload(_valore)) { i := add(i, 1) } {
                // Calcoliamo l'indirizzo dell'elemento nell'array _valore e _attributi
                let valore_element := mload(add(add(_valore, 0x20), mul(i, 0x20)))
                let attributi_element := mload(add(add(_attributi, 0x20), mul(i, 0x20)))

                // Salviamo i valori nei rispettivi array nello storage
                sstore(add(valore.slot, i), valore_element)
                sstore(add(attributi.slot, i), attributi_element)
            }
        }
    }

    function getAttributiValore(uint8 index)public view returns(bytes32,bytes32){
        return (attributi[index],valore[index]);
    }


}