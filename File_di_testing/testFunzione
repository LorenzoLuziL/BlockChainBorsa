// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract primoTest{

    struct StatoMemoria{
        uint numeroPersone;
        uint tempoMedio;
        string nomeRappresentante;
    }
    StatoMemoria public statoMemoria;

    function testFunction(bytes[] memory data,string [] memory attributi) public {
        require(data.length==attributi.length);
       for(uint i=0;i<attributi.length;i++){
        if(keccak256(bytes(attributi[i])) == keccak256(bytes("numeroPersone"))){
            statoMemoria.numeroPersone=abi.decode(data[i], (uint));
        }else if(keccak256(bytes(attributi[i])) == keccak256(bytes("tempMedio"))){
            statoMemoria.tempoMedio=abi.decode(data[i], (uint));
        }else if(keccak256(bytes(attributi[i])) == keccak256(bytes("nomeRappresentante"))){
            statoMemoria.nomeRappresentante=abi.decode(data[i], (string));
        }
       }
    }
    //
    //funzioni di appoggio che mi servono solo per codificare in bytes 
    //gli attributi da passare alla funzione sopra
    //
    function codificaDatiInt(int numero)public pure returns(bytes memory ){
        return abi.encode(numero);
    }

    function codificaDatiString(string memory stringa)public pure returns (bytes memory ){
        return abi.encode(stringa);
    }
}







