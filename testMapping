// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

contract testMapping{

    mapping(bytes=>bytes) testMap;
    //["0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000002","0x000000000000000000000000000000000000000000000000000000000000000c"]
    //["0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000463616e6500000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005676174746f000000000000000000000000000000000000000000000000000000","0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000057065736365000000000000000000000000000000000000000000000000000000"]
    //1 in bytes32: 0x0000000000000000000000000000000000000000000000000000000000000001
    //2 in bytes32: 0x0000000000000000000000000000000000000000000000000000000000000002
    //12 in bytes32: 0x000000000000000000000000000000000000000000000000000000000000000c
    //cane in bytes: 0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000463616e6500000000000000000000000000000000000000000000000000000000
    //gatto in bytes: 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005676174746f000000000000000000000000000000000000000000000000000000
    //pesce in bytes: 0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000057065736365000000000000000000000000000000000000000000000000000000
    
    function insertIntoMap(bytes [] memory attributi, bytes [] memory data) public {
        for(uint i=0;i<attributi.length;i++){
            testMap[attributi[i]]=data[i];
        }
    }

    function getMapping(bytes memory attr) public view returns (bytes memory){
        return testMap[attr];
    }
}